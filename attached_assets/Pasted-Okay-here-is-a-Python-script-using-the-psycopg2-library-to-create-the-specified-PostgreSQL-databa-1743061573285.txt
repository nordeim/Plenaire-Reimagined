Okay, here is a Python script using the `psycopg2` library to create the specified PostgreSQL database schema.

**Prerequisites:**

1.  **Install Python:** If you don't have it, download and install Python (version 3.6+ recommended).
2.  **Install psycopg2:** Open your terminal or command prompt and run:
    ```bash
    pip install psycopg2-binary
    ```
3.  **PostgreSQL Server:** Ensure you have a running PostgreSQL server instance that you can connect to. You'll need connection details (database name, user, password, host, port).
4.  **Database:** The script assumes you want to create these tables within an *existing* database. You might need to create the database itself first using `createdb your_database_name` or via a tool like pgAdmin.

**Python Script (`create_schema.py`):**

```python
import psycopg2
import os
from dotenv import load_dotenv

# --- Configuration ---
# Load environment variables from a .env file if it exists
# Create a .env file in the same directory with:
# DB_NAME=your_database_name
# DB_USER=your_username
# DB_PASSWORD=your_password
# DB_HOST=localhost
# DB_PORT=5432
load_dotenv()

DB_CONFIG = {
    "database": os.getenv("DB_NAME", "plenaire_ecommerce"), # Default DB name
    "user": os.getenv("DB_USER", "postgres"),       # Default user
    "password": os.getenv("DB_PASSWORD", ""),       # Default empty password
    "host": os.getenv("DB_HOST", "localhost"),      # Default host
    "port": os.getenv("DB_PORT", "5432")            # Default port
}

# --- SQL Definitions ---

# Enumerated Types
SQL_CREATE_ENUMS = [
    """
    DO $$ BEGIN
        CREATE TYPE user_role AS ENUM ('user', 'admin');
    EXCEPTION
        WHEN duplicate_object THEN null;
    END $$;
    """,
    """
    DO $$ BEGIN
        CREATE TYPE order_status AS ENUM ('pending', 'processing', 'shipped', 'delivered', 'cancelled');
    EXCEPTION
        WHEN duplicate_object THEN null;
    END $$;
    """,
    """
    DO $$ BEGIN
        CREATE TYPE payment_status AS ENUM ('pending', 'processing', 'completed', 'failed', 'refunded');
    EXCEPTION
        WHEN duplicate_object THEN null;
    END $$;
    """
]

# Table Creation Statements
# Using SERIAL for auto-incrementing integer primary keys
# Using TIMESTAMP for timestamp columns as specified
SQL_CREATE_TABLES = [
    """
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        email TEXT NOT NULL UNIQUE,
        password TEXT NOT NULL,
        first_name TEXT NULL,
        last_name TEXT NULL,
        phone TEXT NULL,
        role user_role NULL DEFAULT 'user',
        created_at TIMESTAMP NULL DEFAULT now(),
        updated_at TIMESTAMP NULL DEFAULT now()
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS sessions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id INTEGER NOT NULL,
        expires_at TIMESTAMP NOT NULL,
        created_at TIMESTAMP NULL DEFAULT now()
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS addresses (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL,
        address_line1 TEXT NOT NULL,
        address_line2 TEXT NULL,
        city TEXT NOT NULL,
        state TEXT NOT NULL,
        postal_code TEXT NOT NULL,
        country TEXT NOT NULL,
        is_default BOOLEAN NULL DEFAULT false,
        created_at TIMESTAMP NULL DEFAULT now(),
        updated_at TIMESTAMP NULL DEFAULT now()
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        description TEXT NULL,
        image_url TEXT NULL,
        created_at TIMESTAMP NULL DEFAULT now(),
        updated_at TIMESTAMP NULL DEFAULT now()
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        price DOUBLE PRECISION NOT NULL,
        description TEXT NOT NULL,
        image_url TEXT NOT NULL,
        featured BOOLEAN NULL DEFAULT false,
        review_count INTEGER NULL DEFAULT 0,
        ingredients TEXT[] NULL,
        category_id INTEGER NULL,
        stock INTEGER NULL DEFAULT 100,
        sku TEXT NOT NULL UNIQUE,
        created_at TIMESTAMP NULL DEFAULT now(),
        updated_at TIMESTAMP NULL DEFAULT now()
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS lifestyle_items (
        id SERIAL PRIMARY KEY,
        title TEXT NOT NULL,
        description TEXT NOT NULL,
        image_url TEXT NOT NULL,
        link TEXT NOT NULL,
        created_at TIMESTAMP NULL DEFAULT now(),
        updated_at TIMESTAMP NULL DEFAULT now()
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS reviews (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL,
        product_id INTEGER NOT NULL,
        rating INTEGER NOT NULL,
        comment TEXT NULL,
        created_at TIMESTAMP NULL DEFAULT now(),
        updated_at TIMESTAMP NULL DEFAULT now()
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS wishlists (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL,
        product_id INTEGER NOT NULL,
        created_at TIMESTAMP NULL DEFAULT now()
        -- Consider adding a UNIQUE constraint on (user_id, product_id)
        -- ALTER TABLE wishlists ADD CONSTRAINT unique_user_product_wishlist UNIQUE (user_id, product_id);
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS carts (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL UNIQUE, -- Assuming one cart per user
        created_at TIMESTAMP NULL DEFAULT now(),
        updated_at TIMESTAMP NULL DEFAULT now()
        -- Note: Schema shows user_id NOT NULL, but doesn't specify unique.
        -- If a user can have multiple carts, remove UNIQUE constraint.
        -- If it's always one active cart per user, UNIQUE is appropriate.
        -- Let's stick to the original schema lack of explicit unique here for now.
        -- Removing UNIQUE constraint based on original schema text:
        -- user_id INTEGER NOT NULL,
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS cart_items (
        id SERIAL PRIMARY KEY,
        cart_id INTEGER NOT NULL,
        product_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL DEFAULT 1,
        created_at TIMESTAMP NULL DEFAULT now(),
        updated_at TIMESTAMP NULL DEFAULT now()
        -- Consider adding a UNIQUE constraint on (cart_id, product_id)
        -- ALTER TABLE cart_items ADD CONSTRAINT unique_cart_product UNIQUE (cart_id, product_id);
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS orders (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL,
        order_number TEXT NOT NULL UNIQUE,
        status order_status NULL DEFAULT 'pending',
        total DOUBLE PRECISION NOT NULL,
        shipping_address_id INTEGER NOT NULL,
        billing_address_id INTEGER NOT NULL,
        payment_status payment_status NULL DEFAULT 'pending',
        stripe_payment_intent_id TEXT NULL,
        notes TEXT NULL,
        created_at TIMESTAMP NULL DEFAULT now(),
        updated_at TIMESTAMP NULL DEFAULT now()
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS order_items (
        id SERIAL PRIMARY KEY,
        order_id INTEGER NOT NULL,
        product_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        price DOUBLE PRECISION NOT NULL,
        created_at TIMESTAMP NULL DEFAULT now()
        -- Note: updated_at was not in the original schema for this table
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS newsletter_subscriptions (
        id SERIAL PRIMARY KEY,
        email TEXT NOT NULL UNIQUE,
        created_at TIMESTAMP NULL DEFAULT now()
    );
    """,
    """
    CREATE TABLE IF NOT EXISTS enquiries (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        email TEXT NOT NULL,
        phone TEXT NULL,
        subject TEXT NOT NULL,
        message TEXT NOT NULL,
        user_id INTEGER NULL, -- Optional FK
        is_resolved BOOLEAN NULL DEFAULT false,
        created_at TIMESTAMP NULL DEFAULT now()
        -- Note: updated_at was not in the original schema for this table
    );
    """
]

# Foreign Key Constraints
# Added separately for clarity and to ensure tables exist first
SQL_ADD_FOREIGN_KEYS = [
    # sessions
    "ALTER TABLE sessions ADD CONSTRAINT fk_sessions_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE;",
    # addresses
    "ALTER TABLE addresses ADD CONSTRAINT fk_addresses_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE;",
    # products
    "ALTER TABLE products ADD CONSTRAINT fk_products_category FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE SET NULL;",
    # reviews
    "ALTER TABLE reviews ADD CONSTRAINT fk_reviews_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE;",
    "ALTER TABLE reviews ADD CONSTRAINT fk_reviews_product FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE;",
    # wishlists
    "ALTER TABLE wishlists ADD CONSTRAINT fk_wishlists_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE;",
    "ALTER TABLE wishlists ADD CONSTRAINT fk_wishlists_product FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE;",
    # carts (if user_id is not unique, this FK is fine)
    "ALTER TABLE carts ADD CONSTRAINT fk_carts_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE;",
    # cart_items
    "ALTER TABLE cart_items ADD CONSTRAINT fk_cart_items_cart FOREIGN KEY (cart_id) REFERENCES carts (id) ON DELETE CASCADE;",
    "ALTER TABLE cart_items ADD CONSTRAINT fk_cart_items_product FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE;",
    # orders
    "ALTER TABLE orders ADD CONSTRAINT fk_orders_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE;", # Or SET NULL/RESTRICT depending on policy
    "ALTER TABLE orders ADD CONSTRAINT fk_orders_shipping_address FOREIGN KEY (shipping_address_id) REFERENCES addresses (id) ON DELETE RESTRICT;", # Prevent deleting address if used in order
    "ALTER TABLE orders ADD CONSTRAINT fk_orders_billing_address FOREIGN KEY (billing_address_id) REFERENCES addresses (id) ON DELETE RESTRICT;", # Prevent deleting address if used in order
    # order_items
    "ALTER TABLE order_items ADD CONSTRAINT fk_order_items_order FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE CASCADE;",
    "ALTER TABLE order_items ADD CONSTRAINT fk_order_items_product FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE RESTRICT;", # Prevent deleting product if ordered
    # enquiries
    "ALTER TABLE enquiries ADD CONSTRAINT fk_enquiries_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE SET NULL;" # Set user_id to NULL if user is deleted
]

# Explicit Unique Constraints (as listed in the schema summary)
# Note: Some unique constraints (users.email, products.sku, orders.order_number, newsletter_subscriptions.email)
# were already added inline in CREATE TABLE for efficiency. Adding them again via ALTER TABLE
# would cause an error. If you prefer adding all constraints separately, remove UNIQUE from CREATE TABLE.
# The script currently includes them inline, so this list is effectively redundant for those columns
# but included here to match the structure of the request if needed.
SQL_ADD_UNIQUE_CONSTRAINTS = [
    # "ALTER TABLE newsletter_subscriptions ADD CONSTRAINT newsletter_subscriptions_email_unique UNIQUE (email);", # Already added
    # "ALTER TABLE orders ADD CONSTRAINT orders_order_number_unique UNIQUE (order_number);", # Already added
    # "ALTER TABLE products ADD CONSTRAINT products_sku_unique UNIQUE (sku);", # Already added
    # "ALTER TABLE users ADD CONSTRAINT users_email_unique UNIQUE (email);", # Already added
]


def create_schema():
    """Connects to the database and creates the schema."""
    conn = None
    cursor = None
    try:
        print(f"Connecting to database '{DB_CONFIG['database']}' on {DB_CONFIG['host']}...")
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        print("Connection successful.")

        # Create Enumerated Types
        print("\nCreating enumerated types...")
        for sql in SQL_CREATE_ENUMS:
            print(f"Executing: {sql.strip()[:100]}...") # Print start of SQL
            cursor.execute(sql)
        print("Enumerated types created (or already exist).")

        # Create Tables
        print("\nCreating tables...")
        for sql in SQL_CREATE_TABLES:
            print(f"Executing: CREATE TABLE IF NOT EXISTS {sql.split('(')[0].split()[-1]}...")
            cursor.execute(sql)
        print("Tables created (or already exist).")

        # Add Foreign Key Constraints
        print("\nAdding foreign key constraints...")
        for sql in SQL_ADD_FOREIGN_KEYS:
            constraint_name = sql.split("ADD CONSTRAINT ")[1].split(" ")[0]
            try:
                print(f"Adding constraint: {constraint_name}...")
                cursor.execute(sql)
                print(f"  -> Added {constraint_name}.")
            except psycopg2.Error as e:
                # Error code '42P07' is duplicate_object (constraint already exists)
                if e.pgcode == '42P07':
                    print(f"  -> Constraint {constraint_name} already exists, skipping.")
                    conn.rollback() # Rollback the failed transaction branch
                elif e.pgcode == '42710': # duplicate_object for other things like indexes potentially created by FK
                     print(f"  -> Constraint or related index {constraint_name} already exists, skipping.")
                     conn.rollback()
                else:
                    print(f"  -> Error adding constraint {constraint_name}: {e}")
                    raise # Re-raise other errors

        print("Foreign key constraints added (or already exist).")

        # Add Explicit Unique Constraints (Optional - handled inline mostly)
        # If SQL_ADD_UNIQUE_CONSTRAINTS is populated and inline UNIQUE removed:
        if SQL_ADD_UNIQUE_CONSTRAINTS:
             print("\nAdding explicit unique constraints...")
             for sql in SQL_ADD_UNIQUE_CONSTRAINTS:
                 constraint_name = sql.split("ADD CONSTRAINT ")[1].split(" ")[0]
                 try:
                     print(f"Adding constraint: {constraint_name}...")
                     cursor.execute(sql)
                     print(f"  -> Added {constraint_name}.")
                 except psycopg2.Error as e:
                     if e.pgcode == '42P07' or e.pgcode == '42710':
                         print(f"  -> Constraint {constraint_name} already exists, skipping.")
                         conn.rollback()
                     else:
                         print(f"  -> Error adding constraint {constraint_name}: {e}")
                         raise
             print("Explicit unique constraints added (or already exist).")


        # Commit changes
        conn.commit()
        print("\nSchema creation process completed successfully. Changes committed.")

    except psycopg2.Error as e:
        print(f"\nDatabase error: {e}")
        if conn:
            conn.rollback() # Rollback changes on error
        print("Schema creation failed. Changes rolled back.")

    finally:
        if cursor:
            cursor.close()
            print("Cursor closed.")
        if conn:
            conn.close()
            print("Database connection closed.")

if __name__ == "__main__":
    # Optional: Add check for required environment variables
    if not DB_CONFIG["password"]:
       print("Warning: DB_PASSWORD environment variable not set.")
       # Consider prompting or exiting if password is required

    create_schema()
```

**Explanation:**

1.  **Import Libraries:** Imports `psycopg2` for database interaction and `os`/`dotenv` for managing connection configuration via environment variables (recommended for security).
2.  **Configuration (`DB_CONFIG`):** Defines connection parameters. It attempts to load these from environment variables (using `.env` file via `python-dotenv` or system environment variables). Defaults are provided. **Remember to create a `.env` file or set environment variables with your actual credentials.**
3.  **SQL Definitions:**
    *   `SQL_CREATE_ENUMS`: Contains `CREATE TYPE` statements for the ENUMs. Uses `DO $$ BEGIN ... EXCEPTION WHEN duplicate_object THEN null; END $$;` to make the script idempotent (runnable multiple times without erroring if types already exist).
    *   `SQL_CREATE_TABLES`: Contains `CREATE TABLE IF NOT EXISTS` statements for each table. `IF NOT EXISTS` prevents errors if tables already exist.
        *   `SERIAL PRIMARY KEY` is used as a shorthand for an auto-incrementing integer primary key.
        *   `UUID PRIMARY KEY DEFAULT gen_random_uuid()` is used for the sessions table ID. `gen_random_uuid()` is built into modern PostgreSQL (13+).
        *   `UNIQUE` constraints specified in the schema description/summary are included directly in the `CREATE TABLE` statements (e.g., `email TEXT NOT NULL UNIQUE`).
        *   Data types, nullability (`NOT NULL` or `NULL`), and defaults (`DEFAULT ...`) match the schema.
    *   `SQL_ADD_FOREIGN_KEYS`: Contains `ALTER TABLE ... ADD CONSTRAINT ... FOREIGN KEY` statements. These are run *after* all tables are created. `ON DELETE` clauses (`CASCADE`, `SET NULL`, `RESTRICT`) are added based on logical assumptions (e.g., deleting a user cascades to delete their cart, reviews, but might restrict deleting an address if it's linked to an order). Adjust these as needed for your application's referential integrity rules. Error handling is included to skip adding constraints if they already exist.
    *   `SQL_ADD_UNIQUE_CONSTRAINTS`: Included for completeness based on the schema summary, but the constraints are already added inline in this version of the script.
4.  **`create_schema()` Function:**
    *   Establishes a connection to the database using `psycopg2.connect()`.
    *   Creates a cursor object (`conn.cursor()`) to execute SQL.
    *   Uses a `try...except...finally` block for error handling and ensuring the connection is always closed.
    *   Executes the SQL statements in order: ENUMs, Tables, Foreign Keys.
    *   Includes print statements to show progress.
    *   Handles potential errors when adding constraints if they already exist (`duplicate_object`, pgcode `42P07` or `42710`).
    *   Commits the transaction (`conn.commit()`) if all statements execute successfully.
    *   Rolls back the transaction (`conn.rollback()`) if any error occurs.
    *   Closes the cursor and connection in the `finally` block.
5.  **`if __name__ == "__main__":` block:** Ensures the `create_schema()` function is called only when the script is executed directly.

**To Use:**

1.  Save the code as `create_schema.py`.
2.  Create a file named `.env` in the same directory (optional but recommended) and add your database credentials:
    ```.env
    DB_NAME=your_database_name
    DB_USER=your_postgres_user
    DB_PASSWORD=your_postgres_password
    DB_HOST=localhost
    DB_PORT=5432
    ```
3.  Make sure the database specified in `DB_NAME` exists on your PostgreSQL server.
4.  Run the script from your terminal:
    ```bash
    python create_schema.py
    ```

The script will connect to your database and execute the necessary SQL commands to build the schema.